Servlet
  - A servelet is a Java class that is utilized to extend the capabilities of request-response programming model servers that host 
    applications. Servlets can interact or respond to any type of request, Servlets are maily used for extending applications hosted 
    by web servers.
Java Servlets
  - handles client requests by generating a response message
  - Java Servlets is hosted in a "servlet container" which is part of a web server that communicates with the servlet so that it will
    let Java to dynamically generate a web page from the server side. Servlet container also controls the servlet lifecycle
  - Pavni Diwanji created the Servlet1 while working at Sun Microsystems, with version 1.0 finalized in June 1997. As of now, 
    Servlet has 10 versions, from Servlet 1.0 to Servlet 4.0.
    Servlet 4.0 	Sep 2017 	       Java EE 8 	
    Servlet 3.1 	May 2013 	       Java EE 7 	
    Servlet 3.0 	December 2009 	 Java EE 6, Java SE 6 	
    Servlet 2.5 	September 2005 	 Java EE 5, Java SE 5 	
    Servlet 2.4 	November 2003 	 J2EE 1.4, J2SE 1.3 	
    Servlet 2.3 	August 2001 	 	 J2EE 1.3, J2SE 1.2 	
    Servlet 2.2 	August 1999 	 	 J2EE 1.2, J2SE 1.2 	
    Servlet 2.1 	November 1998  	 Unspecified 	
    Servlet 2.0 		 	             JDK 1.1 	
    Servlet 1.0 	June 1997 			
*Servlet lifecycle
1. initialization
  - The init() method will be called upon the creation of servlet and it is only called once.
2. request handling
  - Request handling is handled by the method service() which is basically the main method that handles the tasks of each request
    it uses multi-threading to do the tasks.
   - The service() method is called multiple times depending on the number of requests of the user.
3. destruction
- The destruction is handled by the method destroy() which is invoked the website? is done using the object method. 

HTTP Servlet
- used to handle HTTP requests and generate HTTP responses
- the service() method call is connected to a doXXX call (e.g. doGet(), doPost(), doPut(), doDelete())
- the doXXX() methods passes 2 arguements which are HTTPServletRequest and HTTPServletResponse

HTTPServletRequest
- used to access information from the request message
  (Needs to be put in a table)
  Method Summary
  https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/ServletRequest.html

HTTPServletResponse 
- used to access information from the response message
(Needs to be put in a table)
 Method Summary
 https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/ServletResponse.html
 


* The web container also facilitates the conversion from HTTP response to HTTPServletResponse or from HTTP request to HTTPServletRequest.

HTTPSessionHandling
- Cookie-Based
  - Non-Persistent Cookie
  - "The shit"-Sir Montes

HTTPSessionObject
- getsession
- getattribute
- 
HttpServletResponse Methods
1. addCookie (Cookie cookie)
Parameters
cookie - the cookie that will be returned to the client
the specified cookie
2. containsHeader(String headerName)
Parameters
headerName - name of the header
Returns
true - if the headerName has been set else false
3. encodeURL(String url)
Parameters
url - the url that needs to be encoded
Returns
encoded url - the url that needs to be encoded else the unchanged url
4. encodeRedirectURL(String url)
Parameters
url - the url that needs to be encoded
Returns
encoded url - the url that needs to be encoded else the unchanged url
5. encodeRedirectUrl(String url)
Parameters
url - the url that needs to be encoded
Returns
encoded url - the url that needs to be encoded else the unchanged url
6. sendError(int statusCode,String message)
Parameters
statusCode - status code of the error
message - the message that will be passed along with the statusCode
Throws
IOException - if exceptions for input or output occurs 
IllegalStateException - if the response has been committed
Sends a response to an error determined by the specified status
7. sendError(int statusCode)
Parameters
statusCode - status code of the error
Throws
IOException - if exceptions for input or output occurs 
IllegalStateException - if before calling this method, the response has been committed
Sends a response to an error determined by the specified status and clearing the buffer
8. sendRedirect(String location)
Parameters
location - the url that will be used for redirection
Throws
IOException - if exceptions for input or output occurs 
IllegalStateException - if the given url is cannot be transformed into a valid url or the response has been committed
Sends a redirect response to the client with the specified redirection URL location
9. setDateHeader(headerName,date)
Parameters
headerName - the header name to be set
date - the date value to be assigned

sets a response header with the given name and date
10. addDateHeader(String headerName,long date)
Parameters
headerName - the header name to be set
date - the date value to be added

adds response header containing the given name and date
11. setHeader(String headerName,String value)
Parameters
headerName - the header name
value - the value of the header, it should be encoded if it contains octed string

sets a response header with the given name and value
12. addHeader(String headerName,String value)
Parameters
headerName - the header name 
value - the value of the header to be added, it should be encoded if it contains octed string

adds response header containing the given name and value
13. setIntHeader(String headerName,int value)
Parameters
headerName - the header name 
value - the integer value to be assigned

sets a response header with the given name and the integer value
14. addIntHeader(String headerName,int value)
Parameters
headerName - the header name 
value - the integer value to be assigned

adds a response header with the given name and the integer value
15. setStatus(int statusCode)
Parameters
statusCode - status code with ranges of 2XX,3XX,4XX,and 5XX

16. setStatus(int statusCode,String message)
Parameters
statusCode - status code 
message - message passed with the statusCode

sets the status code for the response
17. getStatus()
Returns
the response current status code
18. getHeader(String headerName)
headerName - the response header name that will return its values
Returns
the value of the response header name else null if there is no header name ,on the response, that has been set
19. getHeaders(String headerName)
Parameters
headerName - the response header name that will return its values
Returns
collection of values of the resonse header. it can be null or empty collection
20. getHeaderNames()
Parameters
Returns
collection of values of the resonse header. it can be null or empty collection

HttpServletRequest Method
1.getAuthType()
Returns:
one of static members (BASIC_AUTH, FORM_AUTH, CLIENT_CERT_AUTH, DIGEST_AUTH)
2. getCookies()
Returns 
array - cookies whithin this request. null if there is no cookies
3.getDateHeader(String headerName)
Parameters:
headerName - name of the header
Returns 
long - value of date in the header
Throws:
IllegalArgumentException - if the value of the header can not be converted to date value
4.getDateHeader(String headerName)
Parameters:
headerName - name of the header
Returns 
String - value of the header request. 
null - if the request does not contain the header name
5.getHeaders(String headerName)
Parameters:
headerName - name of the header
Returns 
Enumeration - value of the header request. 
empty enumeration - if the request does not contain the header name.
null - if the header information can not be allowed to access by the container
6.getIntHeader(String headerName)
Parameters
headerName - name of the header
Returns
integer - value that represents the request header value. 
-1 - if the if the request does not contain the header name
Thorws
NumberFormatException - if the value of the header can not be converted to integer
7.getMethod()
Returns
String - the method name of the request made
8.PathInfo()
Returns String
String the extra path information decoded by the web container after the servlet path and before the request url of the query string . 
null - if there is no extra path information
9.getPathTranslated()
Returns
String - the real path. 
10.getContextPath()
Returns
String - portion of the URL that is requested that specifies the request context
11.getQueryString
Returns
String - the query string
null - if the url does not have a query string
12.getRemoteUser()
Returns
String - the user login that is producing this request 
null - if the login of the user is unknown
13.isUserInRole(String role)
Parameter
role - role name
Returns
true- when the user that is producing this request has been authenticated
false - when the user that is producing this request is unauthenticated
14.getUserPrincipal()
Returns
Principal - user name that is producing this request
null - if the user name is unauthenticateda
15.getRequestedSessionId()
Returns
String - session ID
null - if the session is not specified in the request
16.getRequestURI()
Returns
Stirng - part of the url 
17.getRequestURL()
Returns
StringBuffer - reconstructed url
18.getServletPath()
Returns
String - decoded servlet name or servlet path that is being called that is specified in the request URL 
null - if patern "/*" is used when the servlet processed the request
19.getSession(boolean create)
Parameters
create(true) - to make a new session for this request
create(false) - no current session
Returns
HttpSession related with this request 
null - no valid session in the request and create is false
20.getSession()
Returns
HttpSession related with this request 
21.isRequestedSessionIdValid()
Returns
true - the id is valid for the current session context
false - the id is not valid for the current session context
22.isRequestedSessionIdFromCookie()
Returns
true - the id of the session arrived as a cookie
false - the id of the session didnt arrived as a cookie
23.isRequestedSessionIdFromURL()
Returns
true - if the id of the session arrived as a part of a url
false - if the id of the session didnt arrived as a part of a url
24. boolean authenticate(HttpServletResponse response)
Parameters
response -the HttpServletResponse related with this HttpServletResponse 
Returns
true - 
25.login(String username, String password)
Parameters
username - identifier of the user when logged in
password - the password of the user when logged in
Throws
ServletException - if the login function does no support username and password authentication or if the username and password provided fails
26.logout()
ServletException - if the logout fails
27.getParts()
Returns
Collection - part components of the request made
Throws
IOException  - 
ServletException 
llegalStateException  - if the body of the request is larger than maxRequestSize
28.getPart(String partName)
Parameter
partName- name of the Part requested
Returns
Part with given name
null - if the request made is not type multipart/form-data but the requested Part is not contained
Throws
IOException  - 
ServletException 
llegalStateException  - if the body of the request is larger than maxRequestSize


PHP

Java

JS


References:
Program Creek.(n.d).What is Servlet Container? Retrieved from https://www.programcreek.com/2013/04/what-is-servlet-container/

https://docs.oracle.com/javaee/6/tutorial/doc/docinfo.html

https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/ServletRequest.html

https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/ServletResponse.html

https://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html

https://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletResponse.html
