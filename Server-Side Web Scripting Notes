Servlet
  - A servelet is a Java class that is utilized to extend the capabilities of request-response programming model servers that host 
    applications. Servlets can interact or respond to any type of request, Servlets are maily used for extending applications hosted 
    by web servers.
Java Servlets
  - handles client requests by generating a response message
  - Java Servlets is hosted in a "servlet container" which is part of a web server that communicates with the servlet so that it will
    let Java to dynamically generate a web page from the server side. Servlet container also controls the servlet lifecycle
  - Pavni Diwanji created the Servlet1 while working at Sun Microsystems, with version 1.0 finalized in June 1997. As of now, 
    Servlet has 10 versions, from Servlet 1.0 to Servlet 4.0.
    Servlet 4.0 	Sep 2017 	       Java EE 8 	
    Servlet 3.1 	May 2013 	       Java EE 7 	
    Servlet 3.0 	December 2009 	 Java EE 6, Java SE 6 	
    Servlet 2.5 	September 2005 	 Java EE 5, Java SE 5 	
    Servlet 2.4 	November 2003 	 J2EE 1.4, J2SE 1.3 	
    Servlet 2.3 	August 2001 	 	 J2EE 1.3, J2SE 1.2 	
    Servlet 2.2 	August 1999 	 	 J2EE 1.2, J2SE 1.2 	
    Servlet 2.1 	November 1998  	 Unspecified 	
    Servlet 2.0 		 	             JDK 1.1 	
    Servlet 1.0 	June 1997 			
*Servlet lifecycle
1. initialization
  - The init() method will be called upon the creation of servlet and it is only called once.
2. request handling
  - Request handling is handled by the method service() which is basically the main method that handles the tasks of each request
    it uses multi-threading to do the tasks.
   - The service() method is called multiple times depending on the number of requests of the user.
3. destruction
- The destruction is handled by the method destroy() which is invoked the website? is done using the object method. 

HTTPServlet
- Used to handle HTTP requests and generate HTTP responses
- The service() method call is connected to a doXXX call (e.g. doGet(), doPost(), doPut(), doDelete())
- The doXXX() methods passes 2 arguments which are HTTPServletRequest and HTTPServletResponse

HTTPServletRequest
- used to access information from the request message
  (Needs to be put in a table)
  Method Summary
  https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/ServletRequest.html

HTTPServletResponse 
- used to access information from the response message
(Needs to be put in a table)
 Method Summary
 https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/ServletResponse.html
 


* The web container also facilitates the conversion from HTTP response to HTTPServletResponse or from HTTP request to HTTPServletRequest.

HTTPSessionHandling
- HTTP protocol and Web Servers are stateless which is why a seesion is implemented for more persistent data, a session is refers
	to the time limited intercommunication betwen two systems, session are statrful allowing them at least ratain data or 
	information.
- Java is cookie-based, cookie refers to data sent by the web server to the user's web browser as way of remembering statefull 
	information.
- Non-Persistent Cookie are cookies stored in the devices memory and are destroyed once the web browser is closed.
- HttpSession provides a way to identify and store information pertaining to a user.
Important Methods:
- getSession() – Request for the specifies session obejct, if no session object is returned, it creates a session and returns it.
- getSession(boolean value) - Returns session object otherwise returns null.
- getId() – Returns a unique string identifier assigned to the session.
- getAttribute() - Returns the object specified in this session else returns null if no object is found. 
- getCreationTime() - Returns the time of creation of the session.
- getServletContext() – Returns ServletContext in which the session belongs.
- isNew() -  Returns true if the client hasn't interacted with the session.
- invalidate() - Invalidates the session along with unbinding any objets connected to the session.
codes 
- import the necessary libraries
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
- starting a new session
HttpSession newSession = request.getSession(true);



HttpServletResponse Methods
1. addCookie (Cookie cookie) - attach the cookie to the response 
Parameters
cookie - the cookie that will be returned to the client

2. containsHeader(String headerName) -Returns a boolean wether the name of the header has already been set 
Parameters
headerName - name of the header
Returns
true - if the headerName has been set else false

3. encodeURL(String url) - encodes the url with the session id
Parameters
url - the url that needs to be encoded
Returns
encoded url - the url that needs to be encoded else the unchanged url

4. encodeRedirectURL(String url) - encodes the url for the redirect
Parameters
url - the url that needs to be encoded
Returns
encoded url - the url that needs to be encoded else the unchanged url

5. sendError(int statusCode,String message) - Sends a response to an error determined by the specified status
Parameters
statusCode - status code of the error
message - the message that will be passed along with the statusCode
Throws
IOException - if exceptions for input or output occurs 
IllegalStateException - if the response has been committed

6. sendError(int statusCode) - Sends a response to an error determined by the specified status and clearing the buffer
Parameters
statusCode - status code of the error
Throws
IOException - if exceptions for input or output occurs 
IllegalStateException - if before calling this method, the response has been committed


7. sendRedirect(String location) - Sends a redirect response to the client with the specified redirection URL location
Parameters
location - the url that will be used for redirection
Throws
IOException - if exceptions for input or output occurs 
IllegalStateException - if the given url is cannot be transformed into a valid url or the response has been committed

8. setDateHeader(headerName,date) - sets a response header with the given name and date
Parameters
headerName - the header name to be set
date - the date value to be assigned

9. addDateHeader(String headerName,long date) - adds response header containing the given name and date
Parameters
headerName - the header name to be set
date - the date value to be added

10. setHeader(String headerName,String value) - sets a response header with the given name and value
Parameters
headerName - the header name
value - the value of the header, it should be encoded if it contains octed string


11. addHeader(String headerName,String value) - adds response header containing the given name and value
Parameters
headerName - the header name 
value - the value of the header to be added, it should be encoded if it contains octed string

12. setIntHeader(String headerName,int value) - sets a response header with the given name and the integer value
Parameters
headerName - the header name 
value - the integer value to be assigned

13. addIntHeader(String headerName,int value) - adds a response header with the given name and the integer value
Parameters
headerName - the header name 
value - the integer value to be assigned

14. setStatus(int statusCode) - sets a specified status code for the response
Parameters
statusCode - status code with ranges of 2XX,3XX,4XX,and 5XX

15. setStatus(int statusCode,String message) - sets a specified status code and message for the response
Parameters
statusCode - status code 
message - message passed with the statusCode

16. getStatus() - gets the response current status code
Returns
the response current status code

17. getHeader(String headerName) - gets the value of the given response header name
headerName - the response header name that will return its values
Returns
the value of the response header name else null if there is no header name ,on the response, that has been set

18. getHeaders(String headerName)- gets the values of the given response header name
Parameters
headerName - the response header name that will return its values
Returns
collection of values of the resonse header. it can be null or empty collection

19. getHeaderNames() - the all the response header name of the response
Parameters
Returns
collection of values of the resonse header. it can be null or empty collection

HttpServletRequest Method
1.getAuthType() - gets the authentication scheme 
Returns:
one of static members (BASIC_AUTH, FORM_AUTH, CLIENT_CERT_AUTH, DIGEST_AUTH)

2. getCookies() - gets the array of cookies
Returns 
array - cookies whithin this request. null if there is no cookies

3.getDateHeader(String headerName) - gets the date value of the specified request header
Parameters:
headerName - name of the header
Returns 
long - value of date in the header
Throws:
IllegalArgumentException - if the value of the header can not be converted to date value

4.getHeader(String headerName) - gets the string value of the specified header name
Parameters:
headerName - name of the header
Returns 
String - value of the header request. 
null - if the request does not contain the header name

5.getHeaders(String headerName) - gets all the value of the specified header name
Parameters:
headerName - name of the header
Returns 
Enumeration - value of the header request. 
empty enumeration - if the request does not contain the header name.
null - if the header information can not be allowed to access by the container

6.getIntHeader(String headerName)- gets the integer value of the specified header name
Parameters
headerName - name of the header
Returns
integer - value that represents the request header value. 
-1 - if the if the request does not contain the header name
Thorws
NumberFormatException - if the value of the header can not be converted to integer

7.getMethod() - gets the http method name of this request
Returns
String - the method name of the request made

8.PathInfo() - gets the extra path information contained in the URL
Returns String
String the extra path information decoded by the web container after the servlet path and before the request url of the query string . 
null - if there is no extra path information

9.getPathTranslated() - gets the real path contained in the URL
Returns
String - the real path. 

10.getContextPath() - gets portion of the URL that is requested that specifies the request context
Returns
String - portion of the URL that is requested that specifies the request context

11.getQueryString - gets the query string contained in the URL
Returns
String - the query string
null - if the url does not have a query string

12.getRemoteUser() - the user login that is producing this request
Returns
String - the user login that is producing this request 
null - if the login of the user is unknown

13.isUserInRole(String role) - returns a boolean value if the user producing this request has bee authenticated
Parameter
role - role name
Returns
true- when the user that is producing this request has been authenticated
false - when the user that is producing this request is unauthenticated

14.getUserPrincipal() - gets the Principal object containing the user's name
Returns
Principal - user name that is producing this request
null - if the user name is unauthenticated

15.getRequestedSessionId() - gets the requested session id
Returns
String - session ID
null - if the session is not specified in the request

16.getRequestURI()- gets the part of the url from the protocol name
Returns
Stirng - part of the url from the protocol name

17.getRequestURL() - reconstructs the url made by the client to make the request
Returns
StringBuffer - reconstructed url

18.getServletPath() - gets the part of the url that is used to call a servlet
Returns
String - decoded servlet name or servlet path that is being called that is specified in the request URL 
null - if patern "/*" is used when the servlet processed the request

19.getSession(boolean create) - gets the http session related to the request
Parameters
create(true) - to make a new session for this request
create(false) - no current session
Returns
HttpSession related with this request 
null - no valid session in the request and create is false

20.getSession() - gets the current http session related to this reques
Returns
HttpSession related with this request 

21.isRequestedSessionIdValid() - examine if the session id is still valid
Returns
true - the id is valid for the current session context
false - the id is not valid for the current session context

22.isRequestedSessionIdFromCookie() - examine if the session id arrived as a cookie
Returns
true - the id of the session arrived as a cookie
false - the id of the session didnt arrived as a cookie

23.isRequestedSessionIdFromURL() - examine if the session id arrived as a part of the url of the request
Returns
true - if the id of the session arrived as a part of a url
false - if the id of the session didnt arrived as a part of a url

24. authenticate(HttpServletResponse response) - used to authenticate the user that made this request
Parameters
response -the HttpServletResponse related with this HttpServletResponse 
Returns
true - if the the values needed has been established
false - if the values needed is incomplete

25.login(String username, String password) - checks the username and password
Parameters
username - identifier of the user when logged in
password - the password of the user when logged in
Throws
ServletException - if the login function does no support username and password authentication or if the username and password provided fails

26.logout() - the getUserPrincipal, getRemoteUser, and getAuthType called on the request is set to null.
ServletException - if the logout fails

27.getParts() - gets all the part components of the request made
Returns
Collection - part components of the request made
Throws
IOException  - if exceptions for input or output occurs 
ServletException - if the request is not the same type as multipart/form-data
llegalStateException  - if the body of the request is larger than maxRequestSize

28.getPart(String partName) - gets the name of the Part requested
Parameter
partName- name of the Part requested
Returns
Part with given name
null - if the request made is not type multipart/form-data but the requested Part is not contained
Throws
IOException  - if exceptions for input or output occurs 
ServletException - if the request is not the same type as multipart/form-data
llegalStateException  - if the body of the request is larger than maxRequestSize


PHP
History
PHP originally stands for "Personal Home Page Tools". PHP was created in 1994 by Rasmus Lerdof. Later that year, he dropped the name PHP and changed it to FI, an abbreviation for Forms Interpreter. It was originally intended for forms in HTML. Though in the October of 1995, Rasmus released a rewritten code bringing back the name PHP but with the meaning "Personal Home Page Construction Kit". From this, it went through a lot of development process and these are the versions and there release date:
PHP 1.0 - June 8 1995
PHP 2.0 - November 1 1997
PHP 3.0 - June 6 1998
PHP 4.0 - May 22 2000
PHP 4.1 - December 10 2001
PHP 4.2 - April 22 2002
PHP 4.3 - December 27 2002
PHP 4.4 - July 11 2005
PHP 5.0 - July 13 2004
PHP 5.1 - November 24 2005
PHP 5.2 - November 2 2006
PHP 5.3 - June 30 2009
PHP 5.4 - March 1 2012
PHP 5.5 - June 20 2013
PHP 5.6 - August 28 2014
PHP 6.x - N/A
PHP 7.0 - December 3 2018
PHP 7.1 - December 1 2016
PHP 7.2 - November 30 2017

Introduction
In the following lessons, it is expected that you know HTML, CSS, JavaScript and setting up a web server.
PHP today means "PHP: Hypertext Preprocessor" and is known as a scripting language for server-side web development. It is used mainly for making webpages dynamic and interactive. PHP is server-side programming language that runs on web servers. This means that when it is executed, it is executed in the server and nowhere else. PHP scripts must run on web servers or it will not work.

Syntax
PHP scripts can be placed anywhere in an HTML or you can make a separate file with .php as the file extension.
PHP scripts start with <?php and ends with ?>.
Example:
<?php
	echo "Hello World!";
?> 
Note: PHP statements end with a semicolon(;).

Case Sensitivity
All PHP keywords, functions, classes, and user defined functions are NOT case-sensitive.
Example:
echo "Hello"; is the same as
EcHo "Hello";

Comments
To put single line comments, we use (//) or (#) followed by a word or a sentence.
To put multi-line comments, we use /* and */.
Example:
// Single line
# Single line
/*
 Multiline
 Multiline
*/

Variables
There are rules to follow when finding for the perfect variable name. These rules are:
 - The first character must be a dollar sign ($).
 - A variable name must be at least one character in length.
 - The character after the dollar sign ($) must either be a letter or an underscore (_) and following characters can be a letter, underscore or a number.
 - Spaces or special characters other than _ and $ are not allowed in any part of the variable name.
 Examples of legal variable names in PHP:
 	$_var
	$var
	$var_one
 Examples of illegal variable name in PHP:
	var
	$var one
	$var-one

Data Types
PHP has 8 data types mainly String, Integer, Float, Boolean, Array, Object, NULL, and Resource.
A String is just a sequence of characters enclosed by either the single quotes or the double quotes.
Example:
$string = "Hello There";
$string_two = 'Hi there';

An Integer is a data type that is non-decimal.
Example:
$x = 219;
$y = 2;

A float is a number with a decimal point or exponential form.
Example:
$z = 12.345;

A boolean data type represents two possible values: either a TRUE or a FALSE.
Example:
$a = TRUE;
$b = FALSE;

An array is a special data type that can store multiple informations in one single variable.
Example:
$school = array("SCIS",1,"SABM",2);

An object is a data type which stores data and information and how those informations can be used.
Example:
class School {
	 function School() {
	   this->dept = "CS";
	 }
}

$sc = new School();
echo $sc->dept;

A NULL value is a special data type which can only have a value NULL. A variable with a null value is a variable with non value assigned to it.
Example:
$x = 3;
$x = null;

A Resource type is actually not a data type. It stores the reference to functions in external resources. One good example for this is a database call.

PHP GLOBAL VARIABLES - SUPERGLOBALS
$GLOBALS - this super global variable is used to access global variables anywhere in the script
$_SERVER - this super global variable is used to store and hold informations about header, paths and locations.
$_REQUEST - this super global variable is used to collect data from a submission form form an HTML form.
$_POST - this super global variable is widely used for passing variables and also used for collecting data from HTML forms with method value of "post". 
$_GET - this super global variable is widely used for passing variables and also used for collecting data from HTML forms with method value of "get".
$_FILES - this super global variable is used for storing information about the uploaded file. 
$_ENV - this is an associative array of variables passed to the current script via the environment method.
$_COOKIE - this super global variable is use to retrieve the value of the cookie in the browser.
$_SESSION - a super global variable use to set a session.

PHP SELECTION CONSTRUCT
if

if-else

if else-if else

Switch
PHP ITERATION CONSTRUCT
while

for

JAVA

NODE JS

JSP
-JSP(JavaServer Pages) provides a quick way to alter or create dynamic web content. JSP provides quick and easy development for 
web developers and web designers in a dynamic web page that has an advantage for business systems. Java Server Pages is 
platform independent meaning, it could be on any operating system without requiring the Java Virtual Machine(JVM). JSP 
separates the User Interface(UI) from the content and enables web designers to change the layout of the web page without 
changing the primary dynamic content.

Scriptet
-Where java language statements, variable or method declarations, or expressions used for page scripting are contained.
	<% code  %>
-Example
<html>
<head><title>Hello World</title></head>
<body>
<%
out.println("Scriptet");
%>
</body>
</html>

Declarations
-Declaration of one or more variables and methods 
	<% declaration %>
-Example
<%! int o, i, l; %> 
<%! String m; %> 

Expressions
-Code that can be evaluated one way or another to procure a desired result is an expression.
	<%= expression %>
-Example
 <%! int age = 21; %>
 <%= age %>

Comments
-Comments can be seen as notes to the program wriiten
	<%-- comment --%>
-Example
<%-- This is come nice code--%> 

Directives
-Assigns the overall structure of the servlet class.
	<%@ attribute="number" %>
-Three Types:
<%@ page ... %> 	Defines page-dependent attributes.
<%@ include ... %> 	Includes a file to be used.
<%@ taglib ... %> 	Declares a tag library, containing custom actions


References:
https://www.journaldev.com/1907/java-session-management-servlet-httpsession-url-rewriting

http://www.java2s.com/Tutorials/Java/JSP/0020__JSP_Syntax.htm

http://www.informit.com/articles/article.aspx?p=31072&seqNum=7

Program Creek.(n.d).What is Servlet Container? Retrieved from https://www.programcreek.com/2013/04/what-is-servlet-container/

https://docs.oracle.com/javaee/6/tutorial/doc/docinfo.html

https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/ServletRequest.html

https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/ServletResponse.html

https://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html

https://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletResponse.html

https://www.umass.edu/microbio/chime/chimehow/whatisjs.htm

https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript

http://www.oracle.com/technetwork/java/javaee/jsp/index.html


